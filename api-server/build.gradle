apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'


mainClassName = 'com.kantoniak.examplegrpc.server.ApiServer'
applicationDefaultJvmArgs = ["-DRpcServerPort=${RpcServerPort}"]

def unpackedDistsDir = file("${buildDir}/distributions-unpacked")
def distName = 'api-server'

sourceSets {
    main {
        proto {
            srcDir '../proto/src/main/proto'
        }
        java {
            srcDir 'src/main/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0'
        }
        lite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                lite {}
                grpc {
                    option 'lite'
                }
            }
        }

    }
}

idea {
    module {
        excludeDirs = [file('.gradle')]
        if (buildDir.exists()) {
            excludeDirs += files(buildDir.listFiles())
            excludeDirs -= file("$buildDir/generated-sources")
        }
    }
}

configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    // For protos
    implementation "io.grpc:grpc-netty:1.14.0"
    implementation 'com.google.protobuf:protobuf-java:3.6.1'
    implementation 'io.grpc:grpc-okhttp:1.14.0'
    implementation 'io.grpc:grpc-stub:1.14.0'
    implementation ('io.grpc:grpc-protobuf-lite:1.14.0') {
        exclude module: "protobuf-lite"
    }
}

task unzipDist(type: Copy) {
    dependsOn distZip

    def zipFile = file("${buildDir}/distributions/${distName}.zip")
    def outputDir = unpackedDistsDir

    from zipTree(zipFile)
    into outputDir
}

task runServer(type: Exec) {
    dependsOn unzipDist

    def system = org.gradle.internal.os.OperatingSystem.current()

    // Windows-specific
    def batchFile = file("${unpackedDistsDir}/${distName}/bin/${distName}.bat")
    def gitBashExe = new File("C:/Program Files/Git/git-bash.exe")

    // Linux-specific
    def shFile = file("${unpackedDistsDir}/${distName}/bin/${distName}")

    if (system.isWindows()) {
        if (gitBashExe.exists()) {
            commandLine = [gitBashExe, shFile]
        } else {
            commandLine = ['cmd', '/C', 'start', batchFile]
        }
    } else {
        commandLine = shFile
    }

    workingDir = unpackedDistsDir
    ignoreExitValue = true
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"